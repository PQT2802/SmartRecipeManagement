// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRecipe.Infrastructure.DB;

#nullable disable

namespace SmartRecipe.Infrastructure.Migrations
{
    [DbContext(typeof(SmartRecipeDbContext))]
    [Migration("20250814152844_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777771"),
                            Content = "Delicious recipe, easy to follow!",
                            CreatedAt = new DateTime(2025, 8, 5, 16, 0, 0, 0, DateTimeKind.Utc),
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6"),
                            UserId = new Guid("fecb7ca0-067c-4700-bb94-104e4bc9640d")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777772"),
                            Content = "Perfect dessert, loved the gooey center!",
                            CreatedAt = new DateTime(2025, 8, 10, 18, 30, 0, 0, DateTimeKind.Utc),
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46"),
                            UserId = new Guid("fecb7ca0-067c-4700-bb94-104e4bc9640d")
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Spaghetti",
                            Quantity = "200g",
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Name = "Ground Beef",
                            Quantity = "500g",
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Name = "Tomato Sauce",
                            Quantity = "400ml",
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222221"),
                            Name = "Chocolate",
                            Quantity = "200g",
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Butter",
                            Quantity = "100g",
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            Name = "Sugar",
                            Quantity = "150g",
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RecipeId", "UserId")
                        .IsUnique();

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888881"),
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6"),
                            UserId = new Guid("fecb7ca0-067c-4700-bb94-104e4bc9640d")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888882"),
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46"),
                            UserId = new Guid("fecb7ca0-067c-4700-bb94-104e4bc9640d")
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("MediaFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666661"),
                            FileName = "spaghetti_bolognese.jpg",
                            FileType = "Image",
                            FileUrl = "https://drive.google.com/file/d/spaghetti_image",
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6"),
                            UploadedAt = new DateTime(2025, 8, 4, 10, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666662"),
                            FileName = "lava_cake_video.mp4",
                            FileType = "Video",
                            FileUrl = "https://drive.google.com/file/d/lava_cake_video",
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46"),
                            UploadedAt = new DateTime(2025, 8, 9, 14, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.NutritionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Calories")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("Carbs")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Fat")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("Protein")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId")
                        .IsUnique();

                    b.ToTable("NutritionInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555551"),
                            Calories = 800.00m,
                            Carbs = 90.75m,
                            Fat = 25.25m,
                            Protein = 35.50m,
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555552"),
                            Calories = 600.00m,
                            Carbs = 70.75m,
                            Fat = 30.50m,
                            Protein = 10.25m,
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CookTimeMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6"),
                            Category = 2,
                            CookTimeMinutes = 30,
                            CreatedAt = new DateTime(2025, 8, 4, 10, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10ca4c8b-470c-42e5-a957-8cca562ac76c"),
                            Description = "A classic Italian pasta dish with rich meat sauce.",
                            PrepTimeMinutes = 15,
                            Servings = 4,
                            Title = "Spaghetti Bolognese",
                            UpdatedAt = new DateTime(2025, 8, 9, 15, 30, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46"),
                            Category = 3,
                            CookTimeMinutes = 12,
                            CreatedAt = new DateTime(2025, 8, 9, 14, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10ca4c8b-470c-42e5-a957-8cca562ac76c"),
                            Description = "Warm, gooey chocolate cake with a molten center.",
                            PrepTimeMinutes = 20,
                            Servings = 2,
                            Title = "Chocolate Lava Cake",
                            UpdatedAt = new DateTime(2025, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333331"),
                            Description = "Boil spaghetti until al dente.",
                            Order = 1,
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333332"),
                            Description = "Cook ground beef with tomato sauce.",
                            Order = 2,
                            RecipeId = new Guid("1236c0bf-8dac-4455-8706-ecf615980ed6")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444441"),
                            Description = "Melt chocolate and butter together.",
                            Order = 1,
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444442"),
                            Description = "Mix with sugar and bake for 12 minutes.",
                            Order = 2,
                            RecipeId = new Guid("9014ec0c-55aa-465b-ace6-5c5da9d6bf46")
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fecb7ca0-067c-4700-bb94-104e4bc9640d"),
                            Email = "admin@smartrecipe.com",
                            PasswordHash = "String123!",
                            ProfileImageUrl = "https://drive.google.com/file/d/admin_profile_image",
                            Role = "Admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("10ca4c8b-470c-42e5-a957-8cca562ac76c"),
                            Email = "john@smartrecipe.com",
                            PasswordHash = "String123!",
                            ProfileImageUrl = "https://drive.google.com/file/d/john_profile_image",
                            Role = "Contributor",
                            UserName = "chef_john"
                        });
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Comment", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRecipe.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Ingredient", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Like", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Likes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRecipe.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.MediaFile", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithMany("MediaFiles")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.NutritionInfo", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithOne("NutritionInfo")
                        .HasForeignKey("SmartRecipe.Domain.Entities.NutritionInfo", "RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Step", b =>
                {
                    b.HasOne("SmartRecipe.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingredients");

                    b.Navigation("Likes");

                    b.Navigation("MediaFiles");

                    b.Navigation("NutritionInfo")
                        .IsRequired();

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("SmartRecipe.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
